# Generated by Selenium IDE
import pytest
import time
import json
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import re

WAIT_TIME_BASE = 3
WAIT_TIME_SHORT = 2

class TestDauGia():
  currentDate = datetime.now().strftime("%d_%m_%Y")
  fileName = f"TestCaseOutput_{currentDate}.txt"
  isFileInitialized = False

  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def get_city_name(self, cityName):
    if cityName.lower() == "thanh pho da nang":
        return "Thành phố Đà Nẵng"
    elif cityName.lower() == "thanh pho hai phong":
      return "Thành phố Hải Phòng"
    elif cityName.lower() == "thanh pho can tho":
        return "Thành phố Cần Thơ"
    else:
        return "Không tìm thấy tên thành phố phù hợp"
      
  def get_car_type(self, carType):
    if carType.lower() == "xe con":
        return "Xe Con"
    elif carType.lower() == "xe tai":
        return "Xe Tải"
    elif carType.lower() == "xe khach":
        return "Xe Khách"
    else:
        return "Không tìm thấy loại xe phù hợp"

  def get_plate_type(self, plateType):
    if plateType.lower() == "ngu quy":
        return "Ngũ quý"
    elif plateType.lower() == "tu quy":
        return "Tứ quý"
    elif plateType.lower() == "than tai":
        return "Thần tài"
    else:
        return "Không tìm thấy loại xe phù hợp"

  def scroll_to_view(self):
    element = self.driver.find_element(By.CSS_SELECTOR, ".ant-row.license-table-filter .ant-col:nth-child(4) .custom-select-container .label-bksType")
    self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", element)

  def write_to_file(self, content):
    if os.path.exists(self.fileName) and not self.isFileInitialized:
        with open(self.fileName, 'a', encoding='utf-8') as file:
            file.write("\n" + "=" * 40 + "\n") 
        self.isFileInitialized = True
    elif not os.path.exists(self.fileName):
      print(f"File {self.fileName} chưa tồn tại, sẽ tạo mới.")
      self.isFileInitialized = True
    
    # Ghi nội dung vào file
    with open(self.fileName, 'a', encoding='utf-8') as file:
        file.write(content + '\n')

  def test_dauGia(self):
    inputFile = "TestCaseInput.txt"
    inputFileReader = open(inputFile, "r")
    testCase = [ line.strip().split("   ") for line in inputFileReader ] 
    inputFileReader.close()

    plateSearch = testCase[0][0]
    plateTestCases = testCase[1:] 
    

    self.driver.get("https://vpa.com.vn/")
    self.driver.maximize_window()
    time.sleep(5)
    self.scroll_to_view()

    self.write_to_file(f"======================================== START TEST CASE FOR PLATE `{plateSearch}` ========================================")
    print(f"======================================== START TEST CASE FOR PLATE `{plateSearch}` ========================================")

    #Search biển số hợp lệ
    self.driver.find_element(By.CSS_SELECTOR, ".ant-row.license-table-filter > .ant-col:nth-child(1) .ant-input-affix-wrapper input[id=\"1\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, ".ant-row.license-table-filter > .ant-col:nth-child(1) .ant-input-affix-wrapper input").send_keys(plateSearch)
    time.sleep(WAIT_TIME_BASE)
    self.scroll_to_view()
    
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".ant-table-container .ant-table-content table .ant-table-tbody > tr:first-child > td:nth-child(2) .text")
    if not elements:
      assert self.driver.find_element(By.CSS_SELECTOR, ".no-data-container > span").text == "Hiện tại không có dữ liệu"
    else:
      assert elements[0].text == plateSearch 
    self.driver.find_element(By.CSS_SELECTOR, ".ant-row.license-table-filter > .ant-col:nth-child(1) .ant-input-affix-wrapper .ant-input-suffix .ant-input-clear-icon").click()
    self.scroll_to_view()
    print(f"Done ✔️")
    self.write_to_file("Done ✔️")
    print(f"======================================== FINISH TEST CASE FOR PLATE `{plateSearch}` ========================================")
    self.write_to_file(f"======================================== FINISH TEST CASE FOR PLATE `{plateSearch}` ========================================")

    print(f"======================================== START TEST CASE FOR UNKNOWN PLATE ========================================")
    self.write_to_file("======================================== START TEST CASE FOR UNKNOWN PLATE ========================================")
    
    #Search biển số không tồn tại
    self.driver.find_element(By.CSS_SELECTOR, ".ant-row.license-table-filter > .ant-col:nth-child(1) .ant-input-affix-wrapper input[id=\"1\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, ".ant-row.license-table-filter > .ant-col:nth-child(1) .ant-input-affix-wrapper input").send_keys("00A")
    time.sleep(WAIT_TIME_BASE)
    self.scroll_to_view()
    assert self.driver.find_element(By.CSS_SELECTOR, ".no-data-container > span").text == "Hiện tại không có dữ liệu"
    time.sleep(WAIT_TIME_SHORT)
    self.driver.find_element(By.CSS_SELECTOR, ".ant-row.license-table-filter > .ant-col:nth-child(1) .ant-input-affix-wrapper .ant-input-suffix .ant-input-clear-icon").click()
    self.scroll_to_view()
    print(f"Done ✔️")
    self.write_to_file("Done ✔️")
    print(f"======================================== FINISH TEST CASE FOR UNKNOWN PLATE ========================================")
    self.write_to_file("======================================== FINISH TEST CASE FOR UNKNOWN PLATE ========================================")

    for i, testCaseI in enumerate(plateTestCases):
      plateCode, numberPlate, cityName, typeCar, typePlate = testCaseI
      cityName = self.get_city_name(cityName)
      typeCar = self.get_car_type(typeCar)

      # Reset data
      print("Resetting filter...")
      self.write_to_file("Resetting filter...")
      self.driver.find_element(By.CSS_SELECTOR, ".ant-row.license-table-filter .ant-col:nth-child(4) .custom-select-container .label-bksType").click()
      iconDeleteElement = self.driver.find_element(By.CSS_SELECTOR, ".ant-row.license-table-filter > .ant-col:nth-child(1) .ant-input-affix-wrapper .ant-input-suffix .ant-input-clear-icon-hidden")
      if not iconDeleteElement:
        self.driver.find_element(By.CSS_SELECTOR, ".ant-row.license-table-filter > ant-col:nth-child(1) .ant-input-affix-wrapper .ant-input-suffix .ant-input-clear-icon").click()
      time.sleep(WAIT_TIME_SHORT)
      self.scroll_to_view()
      self.driver.find_element(By.CSS_SELECTOR, ".ant-row.license-table-filter .ant-col:nth-child(4) .custom-select-container .label-bksType").click()
      time.sleep(WAIT_TIME_SHORT)
      self.scroll_to_view()
      elements = self.driver.find_elements(By.CSS_SELECTOR, ".checkbox-group:nth-child(1) .checkbox-option  .ant-checkbox-wrapper-checked")
      if elements:
        elements[0].click()


      print(f"======================================== START TEST CASE FOR `{cityName}` ========================================")
      self.write_to_file(f"======================================== START TEST CASE FOR `{cityName}` ========================================")

      # Mở dropdown chọn tỉnh/thành phố
      self.driver.find_element(By.CSS_SELECTOR, ".ant-row.license-table-filter .ant-col:nth-child(2) .ant-select-selector").click()
      time.sleep(WAIT_TIME_SHORT)
      self.driver.find_element(By.CSS_SELECTOR, f".ant-select-dropdown div[id=\"2_list\"] ~ .rc-virtual-list .rc-virtual-list-holder .rc-virtual-list-holder-inner .ant-select-item-option[title=\"{cityName}\"]").click()
      time.sleep(WAIT_TIME_BASE)
      self.scroll_to_view()

      rows = self.driver.find_elements(By.CSS_SELECTOR, ".ant-table-container .ant-table-content table .ant-table-tbody > tr")
      time.sleep(WAIT_TIME_BASE)

      print(f"1, Check city name and plate code of {cityName}")
      self.write_to_file(f"1, Check city name and plate code of {cityName}")

      # Kiểm tra từng dòng
      for index, row in enumerate(rows):
          city_name_in_row = row.find_element(By.CSS_SELECTOR, "td:nth-child(4) .text").text
          plate_code_in_row = row.find_element(By.CSS_SELECTOR, "td:nth-child(2) .text").text
          
          # Kiểm tra tên tỉnh/thành phố
          assert city_name_in_row == cityName, f"Expected city name '{cityName}', but got '{city_name_in_row}'"
          
          # Kiểm tra mã đầu biển số
          assert plateCode in plate_code_in_row, f"Expected plate code containing '{plateCode}', but got '{plate_code_in_row}'"
          
          print(f"Done {index + 1}/{len(rows)} ✔️")
          self.write_to_file(f"Done {index + 1}/{len(rows)} ✔️")

      # Mở dropdown chọn loại xe
      self.driver.find_element(By.CSS_SELECTOR, ".ant-row.license-table-filter .ant-col:nth-child(3) .ant-select-selector").click()
      time.sleep(WAIT_TIME_SHORT)
      self.scroll_to_view()
      self.driver.find_element(By.CSS_SELECTOR, f".ant-select-dropdown div[id=\"3_list\"] ~ .rc-virtual-list .rc-virtual-list-holder .rc-virtual-list-holder-inner .ant-select-item-option[title=\"{typeCar}\"]").click()
      time.sleep(WAIT_TIME_BASE)
      self.scroll_to_view()

      rows = self.driver.find_elements(By.CSS_SELECTOR, ".ant-table-container .ant-table-content table .ant-table-tbody > tr")
      time.sleep(WAIT_TIME_BASE)

      print(f"2, Check car type of {cityName}")
      self.write_to_file(f"2, Check car type of {cityName}")
      for index, row in enumerate(rows):
          car_type_in_row = row.find_element(By.CSS_SELECTOR, "td:nth-child(5) .text").text
          # Kiểm tra loại xe
          assert car_type_in_row == typeCar, f"Expected car type '{typeCar}', but got '{car_type_in_row}'"
          print(f"Done {index + 1}/{len(rows)} ✔️")
          self.write_to_file(f"Done {index + 1}/{len(rows)} ✔️")

      # Mở dropdown chọn loại biển số
      self.driver.find_element(By.CSS_SELECTOR, ".ant-row.license-table-filter .ant-col:nth-child(4) .custom-select-container .label-bksType").click()
      time.sleep(WAIT_TIME_SHORT)

      if typePlate == "Ngu Quy":
          # Chọn loại biển số Ngũ Quý
          self.driver.find_element(By.CSS_SELECTOR, ".checkbox-group:nth-child(1) > .checkbox-option:nth-child(2) .ant-checkbox-input").click()
          time.sleep(WAIT_TIME_SHORT)
          self.scroll_to_view()
          pattern = r"{}-\d(\d)\1\.\1\1".format(numberPlate)

      elif typePlate == "Tu Quy":
          # Chọn loại biển số Tứ Quý
          self.driver.find_element(By.CSS_SELECTOR, ".checkbox-group:nth-child(1) > .checkbox-option:nth-child(4) .ant-checkbox-input").click()
          time.sleep(WAIT_TIME_SHORT)
          self.scroll_to_view()
          pattern = r"^\w{3}-(\d)\1{2,3}\.\d{2}$"

      elif typePlate == "Than Tai":
          # Chọn loại biển số Thần Tài
          self.driver.find_element(By.CSS_SELECTOR, ".checkbox-group:nth-child(1) > .checkbox-option:nth-child(6) .ant-checkbox-input").click()
          time.sleep(WAIT_TIME_SHORT)
          self.scroll_to_view()
          pattern = r"^\w{3}-(\d+)\.\d{2}$"

      # Kiểm tra từng dòng trong bảng cho loại biển số
      rows = self.driver.find_elements(By.CSS_SELECTOR, ".ant-table-container .ant-table-content table .ant-table-tbody > tr")
      time.sleep(WAIT_TIME_BASE)

      print(f"3, Check type plate of {cityName}")
      self.write_to_file(f"3, Check type plate of {cityName}")
      for index, row in enumerate(rows):
          plate_code_in_row = row.find_element(By.CSS_SELECTOR, "td:nth-child(2) .text").text
          plate_type_in_row = row.find_element(By.CSS_SELECTOR, "td:nth-child(6) .text").text
          # time.sleep(WAIT_TIME_SHORT)

          if rows:
              assert re.match(pattern, plate_code_in_row), f"Plate number '{plate_code_in_row}' does not match the expected format"
              assert plate_type_in_row == self.get_plate_type(typePlate), f"Expected plate type '{self.get_plate_type(typePlate)}', but got '{plate_type_in_row}'"
              print(f"Done {index + 1}/{len(rows)} ✔️")
              self.write_to_file(f"Done {index + 1}/{len(rows)} ✔️")
          else:
              assert self.driver.find_element(By.CSS_SELECTOR, ".no-data-container > span").text == "Hiện tại không có dữ liệu"
              print(f"Done {index + 1}/{len(rows)} ✔️")
              self.write_to_file(f"Done {index + 1}/{len(rows)} ✔️")

      print(f"======================================== FINISH TEST CASE FOR `{cityName}` ========================================")
      self.write_to_file(f"======================================== FINISH TEST CASE FOR `{cityName}` ========================================")
